# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
    include:
    - main

pr:
  branches:
    include:
    - '*'

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'f091a952-bf89-4053-8774-4f02c84635a8'
  imageRepositoryBase: 'learnbulgarianshinyapp_base'
  imageRepository: 'learnbulgarianshinyapp'
  containerRegistry: 'learnbgregistry.azurecr.io'
  dockerfilePathBase: '$(Build.SourcesDirectory)/Dockerfile_base'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  azureSubscription: 'Resource Manager - Learn Bulgarian Shiny App'
  appName: 'LearnBulgarianShinyApp'

  # tests variable
  testsPassed: false
  failedSuffix: "-failed"

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: BuildBase
  displayName: Build and push base image stage
  jobs:
  - job: Build
    displayName: Build
    condition: eq(variables['Build.Reason'], 'Manual')
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push base image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepositoryBase)
        dockerfile: $(dockerfilePathBase)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          latest
          $(tag)

- stage: BuildAndTest
  displayName: Build, test, and push app image stage
  jobs:
  - job: BuildAndTestJob
    displayName: Build image and run tests
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)
    - task: Docker@2
      name: BuildImageTask
      displayName: Build app image
      inputs:
        command: build
        dockerfile: $(dockerfilePath)
        repository: $(imageRepository)
        tags: $(tag)
    - script: |
          echo 'Running tests in test image...'
          docker run --name container -i -d ***/$(imageRepository):$(tag)
          docker exec container Rscript $(Build.SourcesDirectory)/ci_check.R
      displayName: Run tests in image
    - script: |
        echo 'tests passed, updating testsPassed'
        echo '##vso[task.setvariable variable=testsPassed]true'
      # if previous task succeded, tests passed so update variable
      displayName: update testsPassed variable as passed
      condition: succeeded()
    - script: |
        echo 'updating $(tag) suffix $(failedSuffix)'
        echo '##vso[task.setvariable variable=tag]$(tag)$(failedSuffix)'
      # if this is not a release and failed -> retag the image to add failedSuffix
      condition: and(eq(variables['testsPassed'], false), ne(variables['Build.SourceBranchName'], 'main'))
      displayName: "Set failed suffix, if the tests failed."
    - task: Docker@2
      displayName: Push app image
      # always push to register even if failed tests
      condition: or(eq(variables['testsPassed'], false), eq(variables['testsPassed'], true))
      inputs:
        command: push
        repository: $(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)


- stage: 'Deploy'
  displayName: 'Deploy the container'
  dependsOn: BuildAndTest
  condition: and(eq(variables['testsPassed'], true), eq(variables['Build.SourceBranchName'], 'main'))
  jobs:
  - job: 'Deploy'
    displayName: 'Deploy job'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: AzureWebAppContainer@1
      inputs:
       appName: $(appName)
       azureSubscription: $(azureSubscription)
       containers: $(containerRegistry)/$(imageRepository):$(tag)
